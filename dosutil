#!/bin/bash

# Author: Evan Singer
# Purpose: Emulate basic DOS/Windows commands in Linux/UNIX with improved structure
# Last Revision Date: 11/17/2023

# Define variables
COMMAND="$1"
SOURCE="$2"
DESTINATION="$3"

# Define the usage function
usage() {
    echo "Usage: dosutil <command> [options]"
    echo "Supported commands:"
    echo "  author        - Output your name"
    echo "  type <file>   - Output the content of a file"
    echo "  copy <source> <destination> - Copy a file or directory"
    echo "  ren <source> <destination>  - Rename a file or directory"
    echo "  move <source> <destination> - Move a file or directory"
    echo "  del <file>    - Delete a file or directory without confirmation"
    echo "  help          - Show this help message"
    exit 1
}

# Checks if a file or directory exists
does_file_exist() {
    if [ -e "$1" ]; then
        if [ -d "$1" ]; then
            echo "Directory"
        else
            echo "File"
        fi
    else
        echo "Not Found"
    fi
}

# Function that verifies the source of the file
check_source() {
    local source="$1"

    local source_type="$(does_file_exist "$source")"

    if [ "$source_type" == "Not Found" ]; then
        echo "Error: Source file '$source' not found."
        exit 1
    fi
}

# Function that verifies the destination of the file
check_destination() {
    local destination="$1"

    local destination_type="$(does_file_exist "$destination")"

    if [ -n "$destination" ] && [ "$destination_type" == "Not Found" ]; then
        echo "Error: Destination file '$destination' not found."
        exit 1
    fi

    if [ -n "$destination" ] && [ "$destination_type" != "Not Found" ]; then
        echo "Error: Destination file '$destination' already exists."
        exit 1
    fi
}

# Function that erifies the destination file is not present
check_no_destination() {
    local destination="$1"

    local destination_type="$(does_file_exist "$destination")"

    if [ "$destination_type" != "Not Found" ]; then
        echo "Error: Destination file '$destination' already exists."
        exit 1
    fi
}

# Interactive function
interactive_mode() {
    local files=($(ls))
	
	PS3="Select an option for sorting: "
    select sort_option in "Name" "Age" "Size" "None"; do
        case $sort_option in
            "Name")
                files=($(ls | sort))
                break
                ;;
            "Age")
                files=($(ls -lt | awk '{print $9}'))
                break
                ;;
            "Size")
                files=($(ls -lS | awk '{print $9}'))
                break
                ;;
            "None")
                break
                ;;
            *)
                echo "Invalid option."
                ;;
        esac
    done
	
    PS3="Select a file or directory: "
    select file in "${files[@]}"; do
        if [ -n "$file" ]; then
            PS3="Select a command: "
            select cmd in "type" "copy" "ren" "del" "move" "help" "copy!" "move!" "ren!"; do
                case $cmd in
                    "type"|"del"|"help")
                        handle_cmd "$cmd" "$file"
                        ;;
                    "copy"|"ren"|"move"|"copy!"|"ren!"|"move!")
                        read -p "Enter destination: " destination
                        handle_cmd "$cmd" "$file" "$destination"
                        ;;
                    *)
                        echo "Invalid command."
                        ;;
                esac
                break
            done
        fi
        break
    done
}

# Function to execute UNIX commands
run_cmd() {
    local command="$1"
    local source="$2"
    local destination="$3"

    local source_type="$(does_file_exist "$source")"
    local destination_type="$(does_file_exist "$destination")"

    # Display the UNIX command about to be executed
    echo
    echo "UNIX command ran: $command $source $destination"
    echo

    # Execute the UNIX command
    eval "$command $source $destination"

    if [ $? -eq 0 ]; then
        echo "Command completed successfully."
    else
        echo "Command failed to execute."
    fi
}


# translates from UNIX to DOS
function handle_cmd() {
    local command="$1"
    local source="$2"
    local destination="$3"

    case "$command" in
        "author")
            echo "Evan Singer"
            ;;

        "type")
            if [ -z "$source" ]; then
                echo "Error: Please provide a file name for 'type' command."
                usage
            else
                check_source "$source"
                cat "$source"
            fi
            ;;

        "copy")
            if [ -z "$source" ] || [ -z "$destination" ]; then
                echo "Error: 'copy' command requires source and destination filenames."
                usage
            else
                check_source "$source"
                check_no_destination "$destination"
                run_cmd "cp" "$source" "$destination"
            fi
            ;;

        "ren")
            if [ -z "$source" ] || [ -z "$destination" ]; then
                echo "Error: 'ren' command requires source and destination filenames."
                usage
            else
                check_source "$source"
                check_no_destination "$destination"
                run_cmd "mv" "$source" "$destination"
            fi
            ;;

        "move")
            if [ -z "$source" ] || [ -z "$destination" ]; then
                echo "Error: 'move' command requires source and destination filenames."
                usage
            else
                check_source "$source"
                check_no_destination "$destination"
                run_cmd "mv" "$source" "$destination"
            fi
            ;;

        "del")
            if [ -z "$source" ]; then
                echo "Error: Please provide a filename for 'del' command."
                usage
            else
                check_source "$source"
                run_cmd "rm -r" "$source"
            fi
            ;;

        "help")
            usage
            ;;
		
		"move!")
            if [ -z "$source" ] || [ -z "$destination" ]; then
                echo "Error: 'move!' command requires source and destination filenames."
                usage
            else
                check_source "$source"
                run_cmd "mv -f" "$source" "$destination"
            fi
            ;;
			
        "ren!")
            if [ -z "$source" ] || [ -z "$destination" ]; then
                echo "Error: 'ren!' command requires source and destination filenames."
                usage
            else
                check_source "$source"
                run_cmd "mv -f" "$source" "$destination"
            fi
            ;;
			
        "copy!")
            if [ -z "$source" ] || [ -z "$destination" ]; then
                echo "Error: 'copy!' command requires source and destination filenames."
                usage
            else
                check_source "$source"
                run_cmd "cp -f" "$source" "$destination"
            fi
            ;;
			
        *)
            echo "Error: Invalid command '$command'."
            usage
            ;;
    esac
}

# DOS/Windows command emulation
if [ -z "$COMMAND" ]; then
    interactive_mode
else
	handle_cmd "$COMMAND" "$SOURCE" "$DESTINATION"
fi

exit 0
