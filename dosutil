#!/bin/bash

# Script Name: dosutil
# Purpose: Emulate basic DOS/Windows file management commands in Linux/UNIX
# Author: Evan Singer
# Last Revision Date: 11/9/2023

# Defines the variables
COMMAND="$1"
SOURCE="$2"
DESTINATION="$3"

# Define the usage function
help() {
    echo "Usage: dosutil <command> [options]"
    echo "Supported commands:"
    echo "  author        - Output your name in the form last, first"
    echo "  type <file>   - Output the content of the file in the first parameter"
    echo "  copy <source> <destination> - Copy a file or directory"
    echo "  ren <source> <destination>  - Rename a file or directory"
    echo "  move <source> <destination> - Move a file or directory"
    echo "  del <file>    - Delete a file or directory (without confirmation)"
    echo "  copy! <source> <destination> - Copy and overwrite a file or directory"
    echo "  move! <source> <destination> - Move and overwrite a file or directory"
    echo "  ren! <source> <destination>  - Rename and overwrite a file or directory"
    echo "  help          - Show this help message"
    exit 1
}

# Define a function to check if a file or directory exists
does_file_exist() {
    if [ -e "$1" ]; then
        if [ -d "$1" ]; then
            echo "Directory"
        else
            echo "File"
        fi
    else
        echo "Not Found"
    fi
}

# Function to verify source
check_source() {
    local source="$1"

    local source_type="$(does_file_exist "$source")"

    if [ "$source_type" == "Not Found" ]; then
        echo "Error: Source file/directory '$source' not found."
        exit 1
    fi
}

# Function to verify destination
check_destination() {
    local destination="$1"

    local destination_type="$(does_file_exist "$destination")"

    if [ -n "$destination" ] && [ "$destination_type" == "Not Found" ]; then
        echo "Error: Destination file/directory '$destination' not found."
        exit 1
    fi

    if [ -n "$destination" ] && [ "$destination_type" != "Not Found" ]; then
        echo "Error: Destination file/directory '$destination' already exists."
        exit 1
    fi
}

# Function to verify that the destination doesn't exist
check_no_destination() {
    local destination="$1"

    local destination_type="$(does_file_exist "$destination")"

    if [ "$destination_type" != "Not Found" ]; then
        echo "Error: Destination file/directory '$destination' already exists."
        exit 1
    fi
}

# Function to verify overwrite conditions
check_overwrite() {
    local destination="$1"
    local overwrite="$2"

    if [ "$overwrite" != "true" ]; then
        local destination_type="$(does_file_exist "$destination")"

        if [ "$destination_type" != "Not Found" ]; then
            echo "Error: Destination file/directory '$destination' already exists. Use '!' parameter to overwrite."
            exit 1
        fi
    fi
}

# Define a function to execute UNIX commands and verify their success
run_cmd() {
    local command="$1"
    local source="$2"
    local destination="$3"

    local source_type="$(does_file_exist "$source")"
    local destination_type="$(does_file_exist "$destination")"

    # Display the UNIX command about to be executed
    echo
    echo "UNIX command ran: $command $source $destination"
    echo

    # Execute the UNIX command
    eval "$command $source $destination"

    if [ $? -eq 0 ]; then
        echo "Command completed successfully."
    else
        echo "Command failed to execute."
    fi
}

# Implement DOS/Windows command emulation
case "$COMMAND" in
    "author")
        echo "Evan Singer"
        ;;

    "type")
        if [ -z "$SOURCE" ]; then
            echo "Error: Please provide a file name for 'type' command."
            help
        else
            check_source "$SOURCE"
            cat "$SOURCE"
        fi
        ;;

    "copy")
        if [ -z "$SOURCE" ] || [ -z "$DESTINATION" ]; then
            echo "Error: 'copy' command requires source and destination filenames."
            help
        else
            check_source "$SOURCE"
            check_no_destination "$DESTINATION"
            check_overwrite "$DESTINATION" "false"
            run_cmd "cp" "$SOURCE" "$DESTINATION"
        fi
        ;;

    "ren")
        if [ -z "$SOURCE" ] || [ -z "$DESTINATION" ]; then
            echo "Error: 'ren' command requires source and destination filenames."
            help
        else
            check_source "$SOURCE"
            check_no_destination "$DESTINATION"
            check_overwrite "$DESTINATION" "false"
            run_cmd "mv" "$SOURCE" "$DESTINATION"
        fi
        ;;

    "move")
        if [ -z "$SOURCE" ] || [ -z "$DESTINATION" ]; then
            echo "Error: 'move' command requires source and destination filenames."
            help
        else
            check_source "$SOURCE"
            check_no_destination "$DESTINATION"
            check_overwrite "$DESTINATION" "false"
            run_cmd "mv" "$SOURCE" "$DESTINATION"
        fi
        ;;

    "del")
        if [ -z "$SOURCE" ]; then
            echo "Error: Please provide a filename for 'del' command."
            help
        else
            check_source "$SOURCE"
            run_cmd "rm -r" "$SOURCE"
        fi
        ;;

    "copy!")
        if [ -z "$SOURCE" ] || [ -z "$DESTINATION" ]; then
            echo "Error: 'copy!' command requires source and destination filenames."
            help
        else
            check_source "$SOURCE"
            check_no_destination "$DESTINATION"
            run_cmd "cp -f" "$SOURCE" "$DESTINATION"
        fi
        ;;

    "ren!")
        if [ -z "$SOURCE" ] || [ -z "$DESTINATION" ]; then
            echo "Error: 'ren!' command requires source and destination filenames."
            help
        else
            check_source "$SOURCE"
            check_no_destination "$DESTINATION"
            run_cmd "mv -f" "$SOURCE" "$DESTINATION"
        fi
        ;;

    "move!")
        if [ -z "$SOURCE" ] || [ -z "$DESTINATION" ]; then
            echo "Error: 'move!' command requires source and destination filenames."
            help
        else
            check_source "$SOURCE"
            check_no_destination "$DESTINATION"
            run_cmd "mv -f" "$SOURCE" "$DESTINATION"
        fi
        ;;

    "help")
        help
        ;;

    *)
        echo "Error: Invalid command '$COMMAND'."
        help
        ;;
esac

exit 0
