#!/bin/bash

# Function to print a message and execute a command
execute_and_report() {
  if [ $# -lt 1 ]; then
    echo "Usage: execute_and_report [command] [message]"
    exit 1
  }
  command="$1"
  message="$2"
  
  echo "UNIX command ran: $command"
  echo

  # Execute the command and capture its exit status
  eval "$command"
  status=$?

  if [ $status -eq 0 ]; then
    echo "Command completed successfully."
  else
    echo "Error: Command failed."
    exit 1
  fi
}

# Check if a command is provided as the first parameter
if [ $# -lt 1 ]; then
  echo "Usage: $0 [command] [additional arguments]"
  exit 1
fi

# Extract the command from the first parameter
command="$1"
shift # Remove the command from the argument list

# Define functions for each supported command

# Function to verify a file's existence and type
verify_file_or_directory() {
  if [ $# -lt 1 ]; then
    echo "Usage: verify_file_or_directory [filename or directory]"
    exit 1
  }
  target="$1"
  if [ -e "$target" ]; then
    if [ -f "$target" ]; then
      echo "File '$target' exists and is a regular file."
    elif [ -d "$target" ]; then
      echo "Directory '$target' exists."
    else
      echo "The target '$target' exists but is of an unknown type."
      exit 1
    fi
  else {
    echo "The target '$target' does not exist."
    exit 1
  }
}

# Function to execute UNIX commands for file manipulation and verify success
execute_file_commands() {
  if [ $# -lt 2 ]; then
    echo "Usage: execute_file_commands [source] [destination]"
    exit 1
  }
  source="$1"
  destination="$2"
  verify_file_or_directory "$source"
  verify_file_or_directory "$destination"
  if [ -e "$destination" ]; then
    if [ "$command" = "copy!" ] || [ "$command" = "ren!" ] || [ "$command" = "move!" ]; then
      echo "Destination '$destination' already exists. Overwriting..."
    else
      echo "Error: Destination '$destination' already exists. Overwriting is not allowed."
      exit 1
    fi
  fi

  if [ "$command" = "copy" ] || [ "$command" = "copy!" ]; then
    execute_and_report "cp -r \"$source\" \"$destination\""
  elif [ "$command" = "ren" ] || [ "$command" = "ren!" ]; then
    execute_and_report "mv \"$source\" \"$destination\""
  elif [ "$command" = "move" ] || [ "$command" = "move!" ]; then
    execute_and_report "mv \"$source\" \"$destination\""
  elif [ "$command" = "del" ]; then
    execute_and_report "rm -r \"$source\""
  fi
}

# Function to output the content of a file
type_file() {
  if [ $# -lt 1 ]; then
    echo "Usage: $0 type [filename]"
    exit 1
  }
  filename="$1"
  cat "$filename"
}

# Function to output a help message
help_message() {
  echo "Supported commands:"
  echo "author - output your name in the form last, first"
  echo "type [filename] - output the content of the file"
  echo "copy [source] [destination] - copy a file or directory"
  echo "ren [oldname] [newname] - rename a file or directory"
  echo "move [source] [destination] - move a file or directory"
  echo "del [filename or directory] - delete a file or directory without confirmation"
  echo "copy! [source] [destination] - copy a file or directory with overwriting"
  echo "ren! [oldname] [newname] - rename a file or directory with overwriting"
  echo "move! [source] [destination] - move a file or directory with overwriting"
  echo "help - output this help message"
}

# Execute the file verification function before running any file manipulation command
case "$command" in
  "copy" | "ren" | "move" | "del" | "copy!" | "ren!" | "move!")
    verify_file_or_directory "$1"
    verify_file_or_directory "$2"
    execute_file_commands "$@"
    ;;
  "author")
    author
    ;;
  "type")
    type_file "$@"
    ;;
  "help")
    help_message
    ;;
  *)
    echo "Invalid command: $command"
    help_message
    exit 1
    ;;
esac
